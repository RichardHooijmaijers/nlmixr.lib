source("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code/_drake.R")
library(bsd.report)
library(tidyverse)
library(drake)
library(assertr)
library(rio)
library(janitor)
library(Rsdtm)
library(lubridate)
library(reshape2)
library(survival)
library(survminer)
source("_drake_functions.R")
source("_drake_manage_001.R")
source("_drake_manage_002.R")
source("_drake_combine.R")
source("explore.R")
source("tte.R")
source("markov.R")
source("markov.R")
dir.create(path = "../Output", showWarnings = FALSE)
source("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code/_drake.R")
d_mod <-
data %>%
mutate(
no_doses_during=CUMDOSE_during == 0
)
survcheck(Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~1, id=USUBJID, data=data)
mod_surv <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~1,
id=USUBJID,
data=data
)
ggsurvplot(mod_surv, data=data)
mod_surv_preexist <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~
Had_Preexisting,
id=USUBJID,
data=data
)
ggsurvplot(
mod_surv_preexist,
data=data,
risk.table = TRUE,        # Add risk table
risk.table.col = "strata",# Risk table color by groups
)
mod_surv_preexist_during <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~
no_doses_during+Had_Preexisting,
id=USUBJID,
data=d_mod
)
ggsurvplot(
mod_surv_preexist_during,
data=d_mod,
risk.table = TRUE,        # Add risk table
risk.table.col = "strata",# Risk table color by groups
)
mod_surv_preexist_during_frq <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~
no_doses_during+Had_Preexisting+EXDOSFRQ_most_recent,
id=USUBJID,
data=d_mod
)
ggsurvplot(
mod_surv_preexist_during_frq,
data=d_mod,
risk.table = TRUE,        # Add risk table
risk.table.col = "strata",# Risk table color by groups
)
mod_surv_during_frq <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~
no_doses_during+EXDOSFRQ_most_recent,
id=USUBJID,
data=d_mod
)
ggsurvplot(
mod_surv_during_frq,
data=d_mod,
risk.table = TRUE,        # Add risk table
risk.table.col = "strata",# Risk table color by groups
)
source("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code/_drake.R")
source("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code/_drake.R")
survcheck(Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~1, id=USUBJID, data=data)
mod_surv <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~1,
id=USUBJID,
data=data
)
p_overall <- ggsurvplot(mod_surv, data=data)
p_overall
mod_surv_preexist <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~
Had_Preexisting,
id=USUBJID,
data=data
)
p_preexist <-
ggsurvplot(
mod_surv_preexist,
data=data,
risk.table = TRUE,        # Add risk table
risk.table.col = "strata",# Risk table color by groups
)
mod_surv_preexist_during <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~
no_doses_during+Had_Preexisting,
id=USUBJID,
data=data
)
mod_surv_preexist_during <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~
no_doses_during+Had_Preexisting,
id=USUBJID,
data=data
)
p_preexist_during <-
ggsurvplot(
mod_surv_preexist_during,
data=data,
risk.table = TRUE,        # Add risk table
risk.table.col = "strata",# Risk table color by groups
)
p_preexist_during
mod_surv_preexist_during_frq <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~
no_doses_during+Had_Preexisting+EXDOSFRQ_most_recent,
id=USUBJID,
data=data
)
p_preexist_during_frq <-
ggsurvplot(
mod_surv_preexist_during_frq,
data=data,
risk.table = TRUE,        # Add risk table
risk.table.col = "strata",# Risk table color by groups
)
mod_surv_during_frq <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~
no_doses_during+EXDOSFRQ_most_recent,
id=USUBJID,
data=data
)
mod_surv_during_frq <-
survfit(
Surv(TSFD_EN - TSFD, event=ASPEC %in% c("RECOVERED/RESOLVED", "RECOVERING/RESOLVING"))~
no_doses_during+EXDOSFRQ_most_recent,
id=USUBJID,
data=data
)
p_during_frq <-
ggsurvplot(
mod_surv_during_frq,
data=data,
risk.table = TRUE,        # Add risk table
risk.table.col = "strata",# Risk table color by groups
)
p_during_frq
p_preexist_during_frq
mod_surv_during_frq
p_during_frq
tibble(
figure=list(p_overall, p_preexist, p_during_frq),
caption=
paste(
"Kaplan-Meier curve for Grade >=2 peripheral neuropathy (PN) continuing:",
c("overall", "by preexisting PN", "by continued dosing and by dosing frequency")
)
)
remotes::install_github("billdenney/bsd.report")
remotes::install_github("billdenney/bsd.report")
library(bsd.report)
library(tidyverse)
library(drake)
library(assertr)
library(rio)
library(janitor)
library(Rsdtm)
library(lubridate)
library(reshape2)
library(survival)
library(survminer)
source("_drake_functions.R")
source("_drake_manage_001.R")
source("_drake_manage_002.R")
source("_drake_combine.R")
source("explore.R")
source("tte.R")
source("markov.R")
source("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code/_drake.R")
source("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code/_drake.R")
d_plot <- readd(p_km_tte_gr2)
knit_print(as_gg_list(d_plot$figure))
source("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code/_drake.R", echo=TRUE)
setwd("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code")
source("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code/_drake.R", echo=TRUE)
source("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code/_drake.R", echo=TRUE)
source("C:/git/prj/Customers/Seattle Genetics/SEA-2022-001 Peripheral Neuropathy Modeling/Code/_drake.R", echo=TRUE)
d <- readRDS("c:/git/nlmixr2/nlmixr2lib/inst/modellib.rds")
d
source("C:/git/nlmixr2/nlmixr2lib/inst/PK_3cmt.r")
source("C:/git/nlmixr2/nlmixr2lib/inst/PK_3cmt.r")
source("C:/git/nlmixr2/nlmixr2lib/inst/PK_3cmt.r")
setwd("C:/git/nlmixr2/nlmixr2lib/R")
?assignInMyNamespace
?.onload
?.onLoad
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
?rbhind
?rbind
?source
devtools::load_all()
dir
file
fileName <- file.path(dir, file)
fileName
modellib
parse(file = fileName)
parsedFile <- parse(file = fileName)
length(parsedFile)
parsedFile[[1]]
length(parsedFile[[1]])
parsedFile[[1]][[1]]
stopifnot(identical(parsedFile[[1]][[1]], as.name("<-")))
parsedFile[[3]]
parsedFile[[1]][[3]]
mod <- nlmixr2::nlmixr2(parsedFile[[1]][[3]])
mod <- nlmixr2::nlmixr2(eval(parsedFile[[1]][[3]]))
mod
foo <- readRDS(file.path(dir, "modellib.rds"))
foo
parsedFile[[1]][[2]]
desc
desc <- readLines(con = fileName, n = 1)
desc
desc <- readLines(con = fileName, n = 1)
descClean <- gsub(x = desc, pattern = "^# *Description: *", replacement = "")
descClean
mod$iniDf
mod$ini
# Extract the parameter names
modParam <- mod$iniDf
# Fixed effects
modParamFixed <- modParam[is.na(modParam$neta1) & is.na(err), ]
modParamFixed
# Fixed effects
modParamFixed <- modParam[is.na(modParam$neta1) & is.na(modParam$err), ]
modParamFixed
modParamErr
# Error model
modParamErr <- modParam[!is.na(modParam$err), ]
stopifnot(nrow(modParamErr) == 1)
modParamErr
foo
devtools::load_all()
devtools::load_all()
modeldb
devtools::document()
modellib("PK_1cmt", iiv="ka")
modellib("PK_1cmt", iiv="lka")
devtools::document()
?packageStartupMessage
modeldb
?tools::file_ext
tools::file_path_sans_ext("foo.R")
devtools::load_all()
modellib("PK_1cmt")
library(testthat)
expect_true("PK_3cmt" %in% modeldb$name)
usethis::use_testthat()
devtools::test()
usethis::use_github_action_check_standard()
usethis::use_package(
)
usethis::use_package("knitr", type = "Suggests")
usethis::use_package("knitr", type = "Suggests")
devtools::check()
devtools::load_all()
devtools::load_all()
warnings()
devtools::load_all()
foo <- modellib("PK_1cmt")
foo
foo <- eval(parse(text=modellib("PK_1cmt")))
foo
foo <- nlmixr2(eval(parse(text=modellib("PK_1cmt"))))
foo <- nlmixr2::nlmixr2(eval(parse(text=modellib("PK_1cmt"))))
foo
foo$allCovs
foo$cmtLines
foo$dvidLine
errParams
foo$errParams
foo$foceiHdEta
foo$foceiOptEnv
foo$fun
foo
foo$ui$fun
foo <- nlmixr2::nlmixr2(eval(parse(text=modellib("PK_1cmt"))))
foo
nlmixr2::nlmixr(object = foo, data = nlmixr2data::theo_sd, est = "focei")
foo2 <- nlmixr2::nlmixr(object = foo, data = nlmixr2data::theo_sd, est = "focei")
foo2
foo2$fun
addIiv <- function(model, iiv = NULL) {
browser()
}
class(foo2)
?nlmixr2
devtools::document()
devtools::load_all()
rm(addIiv())
rm(list = c("addIiv"))
devtools::load_all()
foo <- nlmixr2::nlmixr2(eval(parse(text=modellib("PK_1cmt"))))
foo
foo <- eval(parse(text=modellib("PK_1cmt")))
foo
fooIiv <- addIiv(foo,  iiv = "ka")
addIiv(object = nlmixr2est::nlmixr2(object), iiv = iiv)
devtools::load_all()
fooIiv <- addIiv(foo,  iiv = "ka")
object$fun
object$ini
object$model
getwd()
usethis::use_vignette("create-model-library.Rmd", title = "Creating a Model Library")
usethis::use_vignette("create-model-library", title = "Creating a Model Library")
vignette("rxode2-model-types", package = "rxode2")
getwd()
devtools::load_all()
modeldb
system.file("inst", package = "nlmixr2lib")
system.file
devtools::document()
devtools::document()
?find
?rxSolve
devtools::document()
devtools::document()
devtools::document()
devtools::document()
source("../inst/PK_1cmt_des.r")
PK_1cmt_des(
)
searchReplace(PK_1cmt_des, "lka", "lka + etalka")
searchReplaceHelper(object = object$fun, find = find, replace = replace)
object
length(object)
object[[1]]
searchReplaceHelper(object = functionBody(object), find = find, replace = replace)
devtools::load_all()
searchReplace(PK_1cmt_des, "lka", "lka + etalka")
object
length(object)
object[[1]]
object[[2]]
?UseMethod
devtools::load_all()
searchReplace(PK_1cmt_des, "lka", "lka + etalka")
find
replace
object
length(object)
devtools::load_all()
searchReplace(PK_1cmt_des, "lka", "lka + etalka")
object
length(object)
object[[1]]
object[[2]]
devtools::load_all()
devtools::document()
devtools::document()
searchReplace(PK_1cmt_des, "lka", "lka + etalka")
foo <- searchReplace(PK_1cmt_des, "lka", "lka + etalka")
foo$fun
devtools::document()
devtools::load_all()
foo <- searchReplace(PK_1cmt_des, "lka", "lka + etalka")
devtools::load_all()
foo <- searchReplace(PK_1cmt_des, "lka", "lka + etalka")
object
object
class(object)
devtools::load_all()
devtools::load_all()
devtools::document(
)
devtools::document()
devtools::load_all()
foo <- searchReplace(PK_1cmt_des, "lka", "lka + etalka")
foo
foo$fun
devtools::load_all()
foo <- searchReplace(PK_1cmt_des, "lka", "lka + etalka")
ret
devtools::load_all()
foo <- searchReplace(PK_1cmt_des, "lka", "lka + etalka")
.quoteCallInfoLines(object)
object
.quoteCallInfoLines(match.call(expand.dots = TRUE)[-(1:2)], envir = parent.frame())
.quoteCallInfoLines(match.call(expand.dots = TRUE)[1], envir = parent.frame())
.quoteCallInfoLines(match.call(expand.dots = TRUE)[[1]], envir = parent.frame())
.quoteCallInfoLines(match.call(expand.dots = TRUE), envir = parent.frame())
match.call(expand.dots = TRUE)
match.call(expand.dots = TRUE)[[1]]
match.call(expand.dots = TRUE)[[2]]
.quoteCallInfoLines(match.call(expand.dots = TRUE)[[1]], envir = parent.frame())
.quoteCallInfoLines(match.call(expand.dots = TRUE)[[2]], envir = parent.frame())
object$fun
devtools::load_all()
foo <- searchReplace(PK_1cmt_des, "lka", "lka + etalka")
ret
devtools::load_all()
foo <- searchReplace(PK_1cmt_des, "lka", "lka + etalka")
foo
foo2 <- foo %>% ini(lka=0.1)
foo2
foo3 <- searchReplace(foo2, "lka", "lka + etalka")
foo3
foo3 <- searchReplace(foo2, "etalka + etalka", "etalka")
foo3
foo2
foo3 <- searchReplace(foo2, "lka", "lka + etalka")
foo4 <- searchReplace(foo3, "etalka + etalka", "etalka")
foo3
foo3$fun[[2]][[2]]
functionBody(foo3$fun)[[3]]
functionBody(foo3$fun)[[3]][[2]][[1]]
functionBody(foo3$fun)[[3]][[2]][[2]]
functionBody(foo3$fun)[[3]][[2]][[2]][[3]]
functionBody(foo3$fun)[[3]][[2]][[2]][[3]][[2]]
foo4 <- functionBody(foo3$fun)[[3]][[2]][[2]][[3]][[2]]
length(foo4)
foo4[[1]]
foo4[[2]]
foo4[[3]]
